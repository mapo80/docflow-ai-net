<Project Sdk="Microsoft.NET.Sdk.Web">
  <PropertyGroup>
    <TargetFramework>net9.0</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <NoWarn>$(NoWarn);1591</NoWarn>
  </PropertyGroup>
  <ItemGroup>
    <ProjectReference Include="..\DocflowAi.Net.Infrastructure\DocflowAi.Net.Infrastructure.csproj" />
    <ProjectReference Include="..\DocflowAi.Net.Application\DocflowAi.Net.Application.csproj" />
    <ProjectReference Include="..\DocflowAi.Net.Domain\DocflowAi.Net.Domain.csproj" />
    <ProjectReference Include="..\..\markitdownnet\src\MarkItDownNet\MarkItDownNet.csproj" />
    <ProjectReference Include="..\DocflowAi.Net.BBoxResolver\DocflowAi.Net.BBoxResolver.csproj" />
  </ItemGroup>
  <ItemGroup>
    <PackageReference Include="Azure.AI.OpenAI" Version="2.1.0" />
    <PackageReference Include="OpenAI" Version="2.3.0" />
    <PackageReference Include="Swashbuckle.AspNetCore" Version="9.0.3" />
    <PackageReference Include="Microsoft.AspNetCore.OpenApi" Version="9.0.0" />
    <PackageReference Include="Serilog.AspNetCore" Version="9.0.0" />
    <PackageReference Include="Serilog.Sinks.Console" Version="6.0.0" />
    <PackageReference Include="Serilog.Sinks.File" Version="7.0.0" />
    <PackageReference Include="Serilog.Settings.Configuration" Version="9.0.0" />
    <PackageReference Include="FluentValidation.AspNetCore" Version="11.3.1" />
    <PackageReference Include="Hellang.Middleware.ProblemDetails" Version="6.5.1" />
    <PackageReference Include="AspNetCore.HealthChecks.UI.Client" Version="9.0.0" />
    <PackageReference Include="Microsoft.Extensions.Http.Polly" Version="9.0.8" />
    <PackageReference Include="Hangfire.Core" Version="1.8.14" />
    <PackageReference Include="Hangfire.AspNetCore" Version="1.8.14" />
    <PackageReference Include="Hangfire.MemoryStorage" Version="1.7.0" />
    <PackageReference Include="Microsoft.EntityFrameworkCore" Version="9.0.0" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Sqlite" Version="9.0.0" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.InMemory" Version="9.0.0" />
    <PackageReference Include="Polly" Version="8.3.1" />
    <PackageReference Include="Hangfire.Console.Extensions" Version="2.0.0" />
    <PackageReference Include="Hangfire.Console.Extensions.Serilog" Version="2.0.0" />
    <PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
    <PackageReference Include="System.Net.Http" Version="4.3.4" />
    <PackageReference Include="System.Text.RegularExpressions" Version="4.3.1" />
  </ItemGroup>

  <ItemGroup>
    <Content Include="..\..\dataset\**\*">
      <Link>dataset/%(RecursiveDir)%(Filename)%(Extension)</Link>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
    </Content>
  </ItemGroup>
  <ItemGroup>
    <Content Include="tessdata/**">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
    </Content>
  </ItemGroup>
  <ItemGroup>
    <None Include="..\..\markitdownnet\src\RapidOcrNet\models\**\*">
      <Link>models\%(RecursiveDir)%(Filename)%(Extension)</Link>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
    </None>
  </ItemGroup>
  <PropertyGroup>
    <!-- Scegli UNA variante: noavx | avx | avx2 | avx512 -->
    <LlamaCpuVariant>avx2</LlamaCpuVariant>
    <!-- Facoltativo: rete di sicurezza; puoi rimetterlo true dopo aver verificato -->
    <ErrorOnDuplicatePublishOutputFiles>false</ErrorOnDuplicatePublishOutputFiles>
  </PropertyGroup>

  <!-- 1) SUBITO dopo ResolvePackageAssets: rimuovi le varianti non scelte -->
  <Target Name="FilterLlamaVariantsEarly" AfterTargets="ResolvePackageAssets">
    <ItemGroup>
      <RuntimeCopyLocalItems Remove="@(RuntimeCopyLocalItems)" Condition=" '%(RuntimeCopyLocalItems.PackageName)' == 'LLamaSharp.Backend.Cpu'&#xA;                    And $([System.Text.RegularExpressions.Regex]::IsMatch('%(RuntimeCopyLocalItems.PathInPackage)', '^runtimes/linux-x64/native/'))&#xA;                    And Not($([System.Text.RegularExpressions.Regex]::IsMatch('%(RuntimeCopyLocalItems.PathInPackage)', '/$(LlamaCpuVariant)/'))) " />
      <NativeCopyLocalItems Remove="@(NativeCopyLocalItems)" Condition=" '%(NativeCopyLocalItems.PackageName)' == 'LLamaSharp.Backend.Cpu'&#xA;                    And $([System.Text.RegularExpressions.Regex]::IsMatch('%(NativeCopyLocalItems.PathInPackage)', '^runtimes/linux-x64/native/'))&#xA;                    And Not($([System.Text.RegularExpressions.Regex]::IsMatch('%(NativeCopyLocalItems.PathInPackage)', '/$(LlamaCpuVariant)/'))) " />
    </ItemGroup>
  </Target>

  <!-- 2) Dopo la generazione della lista di publish: ulteriore pulizia -->
  <Target Name="FilterLlamaVariantsPublish" AfterTargets="ResolvePublishFiles">
    <ItemGroup>
      <ResolvedFileToPublish Remove="@(ResolvedFileToPublish)" Condition=" '%(ResolvedFileToPublish.PackageId)' == 'LLamaSharp.Backend.Cpu'&#xA;                    And $([System.Text.RegularExpressions.Regex]::IsMatch('%(ResolvedFileToPublish.RelativePath)', '^runtimes/linux-x64/native/'))&#xA;                    And Not($([System.Text.RegularExpressions.Regex]::IsMatch('%(ResolvedFileToPublish.RelativePath)', '/$(LlamaCpuVariant)/'))) " />
    </ItemGroup>
  </Target>

</Project>
