import { useState } from 'react';
import { Button, Card, Input, Space, Table, message } from 'antd';
import { RulesService } from '../generated/services/RulesService';
import { useNavigate } from 'react-router-dom';

type Row = { id: string; when: string; then: string; note?: string };

function toCode(rows: Row[]): string {
  const lines: string[] = [];
  lines.push('// generated by DecisionTable builder');
  lines.push('var ctx = g;');
  lines.push('bool matched = false;');
  rows.forEach((r, i) => {
    const cond = r.when?.trim() || "true";
    const acts = (r.then||'').split(';').map(s=>s.trim()).filter(Boolean);
    const ifOrElse = i===0 ? 'if' : 'else if';
    lines.push(`${ifOrElse} (${cond}) {`);
    acts.forEach(a => {
      if (a.toLowerCase().startsWith('set ')) {
        const m = a.replace(/^set\s+/i,'').split('=');
        if (m.length===2) {
          const key = m[0].trim();
          const expr = m[1].trim();
          lines.push(`  ctx.Set("${key}", ${expr});`);
        }
      } else if (a.toLowerCase().startsWith('errors +=')) {
        const rest = a.substring('errors +='.length).trim();
        lines.push(`  // append error ${rest}`);
      } else {
        lines.push(`  // action: ${a}`);
      }
    });
    lines.push('  matched = true;');
    lines.push('}');
  });
  lines.push('if (!matched) { /* no-op */ }');
  lines.push('');
  return lines.join('\n');
}

export default function RuleDecisionPage(){
  const [rows, setRows] = useState<Row[]>([
    { id: crypto.randomUUID(), when: 'g.Get<string>("country") == "IT" && (g.Get<string>("cap")??"").Length == 5', then: 'set normalized_province = g.Get<string>("province")?.ToUpperInvariant()' },
    { id: crypto.randomUUID(), when: 'g.Get<string>("country") == "IT" && (g.Get<string>("cap")??"").Length != 5', then: 'errors += "CAP bad"' },
    { id: crypto.randomUUID(), when: 'g.Get<string>("country") != "IT"', then: '(no-op)' },
  ]);
  const [name, setName] = useState('DecisionRule');
  const nav = useNavigate();

  const addRow = () => setRows(prev => prev.concat({ id: crypto.randomUUID(), when: '', then: '' }));
  const remove = (id:string) => setRows(prev => prev.filter(r=> r.id!==id));

  const createRule = async () => {
    const code = toCode(rows);
    try {
      const created:any = await RulesService.postApiV1Rules({ requestBody: { name, description: 'Generated from decision table', code, enabled: true } });
      message.success('Rule created');
      nav(`/rules/${created?.id}`);
    } catch(e:any){
      message.error(e?.message || 'Create failed');
    }
  };

  return (
    <Space direction="vertical" size="large" style={{ width:'100%' }}>
      <Card title="Decision Table">
        <Table<Row>
          dataSource={rows}
          rowKey="id"
          pagination={false}
          columns={[
            { title:'When (C# expr using g)', dataIndex:'when', render: (_:any, row:Row)=>(<Input value={row.when} onChange={e=> setRows(prev=> prev.map(r=> r.id===row.id? {...r, when:e.target.value}: r))} />)},
            { title:'Then (actions; sep by ;)', dataIndex:'then', render: (_:any, row:Row)=>(<Input value={row.then} onChange={e=> setRows(prev=> prev.map(r=> r.id===row.id? {...r, then:e.target.value}: r))} />)},
            { title:'Note', dataIndex:'note', render: (_:any, row:Row)=>(<Input value={row.note} onChange={e=> setRows(prev=> prev.map(r=> r.id===row.id? {...r, note:e.target.value}: r))} />)},
            { title:'', render: (_:any, row:Row)=>(<Button danger onClick={()=>remove(row.id)}>Delete</Button>)}
          ]}
          footer={() => (
            <Space>
              <Button onClick={addRow}>+ Add row</Button>
              <Button onClick={()=> navigator.clipboard.writeText(toCode(rows))}>Copy code</Button>
            </Space>
          )}
        />
      </Card>

      <Card title="Output code (preview)">
        <pre style={{ margin:0, whiteSpace:'pre-wrap' }}>{toCode(rows)}</pre>
      </Card>

      <Card title="Create Rule">
        <Space>
          <Input placeholder="Rule name" value={name} onChange={e=> setName(e.target.value)} style={{ width:260 }}/>
          <Button type="primary" onClick={createRule}>Create rule</Button>
        </Space>
      </Card>
    </Space>
  );
}
