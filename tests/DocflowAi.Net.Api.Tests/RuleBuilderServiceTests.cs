using System.Text.Json.Nodes;
using DocflowAi.Net.Api.Rules.Services;
using FluentAssertions;
using Xunit;

namespace DocflowAi.Net.Api.Tests;

[Trait("Category","RuleBuilderService")]
public class RuleBuilderServiceTests
{
    [Fact]
    public void Validate_missing_type_returns_error()
    {
        var svc = new RuleBuilderService();
        var req = new RuleBuilderService.CompileReq(new JsonArray(new JsonObject { ["field"] = "x" }));
        var res = svc.Validate(req);
        res.Ok.Should().BeFalse();
        res.Errors.Should().Contain(e => e.Path == "blocks[0]" && e.Message == "type is required");
    }

    [Fact]
    public void Validate_valid_block_succeeds()
    {
        var svc = new RuleBuilderService();
        var blocks = new JsonArray(new JsonObject { ["type"] = "exists", ["field"] = "a" });
        var res = svc.Validate(new RuleBuilderService.CompileReq(blocks));
        res.Ok.Should().BeTrue();
    }

    [Fact]
    public void Compile_invalid_returns_errors()
    {
        var svc = new RuleBuilderService();
        var blocks = new JsonArray(new JsonObject());
        var res = svc.Compile(new RuleBuilderService.CompileReq(blocks));
        res.Ok.Should().BeFalse();
        res.Errors.Should().NotBeEmpty();
    }

    [Fact]
    public void Compile_valid_returns_code()
    {
        var svc = new RuleBuilderService();
        var blocks = new JsonArray(
            new JsonObject { ["type"] = "exists", ["field"] = "x" },
            new JsonObject { ["type"] = "compare", ["field"] = "x", ["op"] = "==", ["value"] = "1" }
        );
        var res = svc.Compile(new RuleBuilderService.CompileReq(blocks));
        res.Ok.Should().BeTrue();
        res.Code!.Should().Contain("generated by builder");
    }
}

