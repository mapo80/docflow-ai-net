using System.Net;
using System.Net.Http.Json;
using System.Text.Json.Nodes;
using DocflowAi.Net.Api.Tests.Fixtures;
using Microsoft.AspNetCore.Mvc.Testing;
using FluentAssertions;
using Xunit;

namespace DocflowAi.Net.Api.Tests;

[Trait("Category","RuleBuilderEndpoints")]
public class RuleBuilderEndpointsTests : IClassFixture<TempDirFixture>
{
    private readonly TempDirFixture _fx;
    public RuleBuilderEndpointsTests(TempDirFixture fx) => _fx = fx;

    private static HttpClient CreateClient(WebApplicationFactory<Program> factory)
    {
        var client = factory.CreateClient();
        client.DefaultRequestHeaders.Add("X-API-Key", "dev-secret-key-change-me");
        return client;
    }

    [Fact]
    public async Task Validate_endpoint_reports_errors()
    {
        await using var factory = new TestWebAppFactory(_fx.RootPath);
        var client = CreateClient(factory);
        var resp = await client.PostAsJsonAsync("/api/v1/rulebuilder/validate", new { blocks = new[] { new { field = "x" } } });
        resp.StatusCode.Should().Be(HttpStatusCode.OK);
        var body = await resp.Content.ReadFromJsonAsync<JsonObject>();
        body!["ok"]!.GetValue<bool>().Should().BeFalse();
    }

    [Fact]
    public async Task Compile_returns_code_for_valid_input()
    {
        await using var factory = new TestWebAppFactory(_fx.RootPath);
        var client = CreateClient(factory);
        var req = new { blocks = new[] { new { type = "exists", field = "x" } } };
        var resp = await client.PostAsJsonAsync("/api/v1/rulebuilder/compile", req);
        resp.StatusCode.Should().Be(HttpStatusCode.OK);
        var body = await resp.Content.ReadFromJsonAsync<JsonObject>();
        body!["ok"]!.GetValue<bool>().Should().BeTrue();
        body["code"]!.GetValue<string>().Should().Contain("generated by builder");
    }

    [Fact]
    public async Task Compile_invalid_returns_bad_request()
    {
        await using var factory = new TestWebAppFactory(_fx.RootPath);
        var client = CreateClient(factory);
        var resp = await client.PostAsJsonAsync("/api/v1/rulebuilder/compile", new { blocks = new[] { new { } } });
        resp.StatusCode.Should().Be(HttpStatusCode.BadRequest);
        var body = await resp.Content.ReadFromJsonAsync<JsonObject>();
        body!["ok"]!.GetValue<bool>().Should().BeFalse();
    }
}

